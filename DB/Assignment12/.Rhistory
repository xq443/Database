}
# Show all tables in the database
tables <- dbListTables(conn)
print(tables)
for (table in tables) {
cat("\nSchema for table:", table, "\n")
print(dbGetQuery(conn, paste0("PRAGMA table_info(", table, ");")))
}
# Show all tables in the database
tables <- dbListTables(conn)
print(tables)
# Show all tables in the database
DBI::dbListTables(conn)
DBI::dbGetQuery(conn, "PRAGMA table_info(rental)")
DBI::dbGetQuery(conn, "PRAGMA table_info(payment)")
DBI::dbGetQuery(conn, "PRAGMA table_info(customer)")
DBI::dbGetQuery(conn, "PRAGMA table_info(staff)")
DBI::dbGetQuery(conn, "PRAGMA table_info(store)")
# Show all tables in the database
dbListTables(conn)
DBI::dbGetQuery(conn, "PRAGMA table_info(rental)")
DBI::dbGetQuery(conn, "PRAGMA table_info(payment)")
DBI::dbGetQuery(conn, "PRAGMA table_info(customer)")
DBI::dbGetQuery(conn, "PRAGMA table_info(staff)")
DBI::dbGetQuery(conn, "PRAGMA table_info(store)")
# Show all tables in the database
dbListTables(conn)
dbGetQuery(conn, "PRAGMA table_info(rental)")
dbGetQuery(conn, "PRAGMA table_info(payment)")
dbGetQuery(conn, "PRAGMA table_info(customer)")
dbGetQuery(conn, "PRAGMA table_info(staff)")
dbGetQuery(conn, "PRAGMA table_info(store)")
library(DBI)
library(RSQLite)
# Load libraries
library(DBI)
library(RSQLite)
# Connect to original transactional database
sakila_conn <- dbConnect(SQLite(), "sakila.db")
# Create and connect to new OLAP database
olap_conn <- dbConnect(SQLite(), "SakilaOLAP.db")
print("connection succeeded!")
# Drop table if it exists
dbExecute(olap_conn, "DROP TABLE IF EXISTS fact_rental_revenue")
# Create a new fact table to store aggregated rental revenue information
create_fact_table_sql <- "
CREATE TABLE fact_rental_revenue (
rental_id INTEGER PRIMARY KEY,
date_id TEXT,
customer_id INTEGER,
staff_id INTEGER,
store_id INTEGER,
rental_amount REAL,
late_return_days INTEGER
);
"
dbExecute(olap_conn, create_fact_table_sql)
# Drop table if it exists
dbExecute(olap_conn, "DROP TABLE IF EXISTS fact_rental_revenue")
# Create a new fact table to store aggregated rental revenue information
create_fact_table_sql <- "
CREATE TABLE fact_rental_revenue (
rental_id INTEGER PRIMARY KEY,
date_id TEXT,
customer_id INTEGER,
staff_id INTEGER,
store_id INTEGER,
rental_amount REAL,
late_return_days INTEGER
);
"
dbExecute(olap_conn, create_fact_table_sql)
extract_query <- "
SELECT
r.rental_id,
DATE(r.rental_date) AS date_id,
r.customer_id,
r.staff_id,
i.store_id,
IFNULL(SUM(p.amount), 0) AS rental_amount,
CAST((JULIANDAY(r.return_date) - JULIANDAY(r.rental_date)) AS INTEGER) AS late_return_days
FROM rental r
JOIN inventory i ON r.inventory_id = i.inventory_id
LEFT JOIN payment p ON r.rental_id = p.rental_id
GROUP BY r.rental_id
"
rental_facts <- dbGetQuery(sakila_conn, extract_query)
head(rental_facts)
# Insert extracted data into OLAP database
dbWriteTable(olap_conn, "fact_rental_revenue", rental_facts, append = TRUE, row.names = FALSE)
# Check that data was inserted
dbGetQuery(olap_conn, "SELECT COUNT(*) AS row_count FROM fact_rental_revenue")
# Display sample rows from OLAP fact table
dbGetQuery(olap_conn, "SELECT * FROM fact_rental_revenue LIMIT 5")
# Load libraries
library(DBI)
library(RSQLite)
query <- "
SELECT
SUBSTR(date_id, 1, 7) AS year_month,
ROUND(AVG(rental_amount), 2) AS avg_rental_amount
FROM fact_rental_revenue
WHERE date_id >= DATE('now', '-12 months')
GROUP BY year_month
ORDER BY year_month
"
monthly_avg <- dbGetQuery(olap_conn, query)
print(monthly_avg)
# Load libraries
library(DBI)
library(RSQLite)
query <- "
SELECT *,
SUBSTR(date_id, 1, 7) AS year_month,
ROUND(AVG(rental_amount), 2) AS avg_rental_amount
FROM fact_rental_revenue
WHERE date_id >= DATE('now', '-12 months')
GROUP BY year_month
ORDER BY year_month
"
monthly_avg <- dbGetQuery(olap_conn, query)
print(monthly_avg)
# Load libraries
library(DBI)
library(RSQLite)
query <- "
SELECT
SUBSTR(date_id, 1, 7) AS year_month,
ROUND(AVG(rental_amount), 2) AS avg_rental_amount
FROM fact_rental_revenue
WHERE date_id LIKE '2005-%'
GROUP BY year_month
ORDER BY year_month
"
monthly_avg <- dbGetQuery(olap_conn, query)
print(monthly_avg)
# Load libraries
library(DBI)
library(RSQLite)
query <- "
SELECT
SUBSTR(date_id, 1, 7) AS year_month,
ROUND(AVG(rental_amount), 2) AS avg_rental_amount
FROM fact_rental_revenue
WHERE date_id LIKE '2020-%'
GROUP BY year_month
ORDER BY year_month
"
monthly_avg <- dbGetQuery(olap_conn, query)
print(monthly_avg)
# Load libraries
library(DBI)
library(RSQLite)
query <- "
SELECT
SUBSTR(date_id, 1, 7) AS year_month,
ROUND(AVG(rental_amount), 2) AS avg_rental_amount
FROM fact_rental_revenue
WHERE date_id LIKE '2008-%'
GROUP BY year_month
ORDER BY year_month
"
monthly_avg <- dbGetQuery(olap_conn, query)
print(monthly_avg)
# Load libraries
library(DBI)
library(RSQLite)
query <- "
SELECT
SUBSTR(date_id, 1, 7) AS year_month,
ROUND(AVG(rental_amount), 2) AS avg_rental_amount
FROM fact_rental_revenue
WHERE date_id LIKE '2006-%'
GROUP BY year_month
ORDER BY year_month
"
monthly_avg <- dbGetQuery(olap_conn, query)
print(monthly_avg)
# Load libraries
library(DBI)
library(RSQLite)
query <- "
SELECT
SUBSTR(date_id, 1, 7) AS year_month,
ROUND(AVG(rental_amount), 2) AS avg_rental_amount
FROM fact_rental_revenue
WHERE date_id LIKE '2000-%'
GROUP BY year_month
ORDER BY year_month
"
monthly_avg <- dbGetQuery(olap_conn, query)
print(monthly_avg)
# Load libraries
library(DBI)
library(RSQLite)
query <- "
SELECT
SUBSTR(date_id, 1, 7) AS year_month,
ROUND(AVG(rental_amount), 2) AS avg_rental_amount
FROM fact_rental_revenue
WHERE date_id LIKE '2005-%'
GROUP BY year_month
ORDER BY year_month
"
monthly_avg <- dbGetQuery(olap_conn, query)
print(monthly_avg)
# Load libraries
library(DBI)
library(RSQLite)
query <- "
SELECT
SUBSTR(date_id, 1, 7) AS year_month,
ROUND(AVG(rental_amount), 2) AS avg_rental_amount
FROM fact_rental_revenue
WHERE date_id LIKE '2006-%'
GROUP BY year_month
ORDER BY year_month
"
monthly_avg <- dbGetQuery(olap_conn, query)
print(monthly_avg)
# Load libraries
library(DBI)
library(RSQLite)
query <- "
SELECT
SUBSTR(date_id, 1, 7) AS year_month,
ROUND(AVG(rental_amount), 2) AS avg_rental_amount
FROM fact_rental_revenue
WHERE date_id LIKE '2005-%'
GROUP BY year_month
ORDER BY year_month
"
monthly_avg <- dbGetQuery(olap_conn, query)
print(monthly_avg)
# Load libraries
library(DBI)
library(RSQLite)
query <- "
SELECT
SUBSTR(date_id, 1, 7) AS year_month,
ROUND(AVG(rental_amount), 2) AS avg_rental_amount
FROM fact_rental_revenue
WHERE date_id LIKE '2004-%'
GROUP BY year_month
ORDER BY year_month
"
monthly_avg <- dbGetQuery(olap_conn, query)
print(monthly_avg)
# Load libraries
library(DBI)
library(RSQLite)
query <- "
SELECT
SUBSTR(date_id, 1, 7) AS year_month,
ROUND(AVG(rental_amount), 2) AS avg_rental_amount
FROM fact_rental_revenue
WHERE date_id LIKE '2005-%'
GROUP BY year_month
ORDER BY year_month
"
monthly_avg <- dbGetQuery(olap_conn, query)
print(monthly_avg)
# Load libraries
library(DBI)
library(RSQLite)
# Convert year_month to Date for plotting
monthly_avg_2005$month <- as.Date(paste0(monthly_avg_2005$year_month, "-01"))
# Plot using base R
plot(
monthly_avg_2005$month,
monthly_avg_2005$avg_rental_amount,
type = "o",
col = "darkgreen",
lwd = 2,
xlab = "Month (2005)",
ylab = "Avg Rental Amount ($)",
main = "Average Rental Amount Per Month in 2005"
)
grid()
# Load libraries
library(DBI)
library(RSQLite)
library(DBI)
library(RSQLite)
library(ggplot2)
# Convert year_month to Date for plotting
monthly_avg_2005$month <- as.Date(paste0(monthly_avg_2005$year_month, "-01"))
# Plot using base R
plot(
monthly_avg_2005$month,
monthly_avg_2005$avg_rental_amount,
type = "o",
col = "darkgreen",
lwd = 2,
xlab = "Month (2005)",
ylab = "Avg Rental Amount ($)",
main = "Average Rental Amount Per Month in 2005"
)
grid()
# Load libraries
library(DBI)
library(RSQLite)
# Create a new column with the first day of each month for plotting
monthly_avg_2005$month <- as.Date(paste0(monthly_avg_2005$year_month, "-01"))
# Plot using ggplot
ggplot(monthly_avg_2005, aes(x = month, y = avg_rental_amount)) +
geom_line(color = "steelblue", size = 1.2) +
geom_point(color = "darkred", size = 2) +
labs(
title = "Average Rental Amount Per Month (2005)",
x = "Month",
y = "Avg Rental Amount ($)"
) +
theme_minimal()
# Create a new column with the first day of each month for plotting
monthly_avg_2005$month <- as.Date(paste0(monthly_avg_2005$year_month, "-01"))
# Plot using ggplot
ggplot(monthly_avg_2005, aes(x = month, y = avg_rental_amount)) +
geom_line(color = "steelblue", size = 1.2) +
geom_point(color = "darkred", size = 2) +
labs(
title = "Average Rental Amount Per Month (2005)",
x = "Month",
y = "Avg Rental Amount ($)"
) +
theme_minimal()
# Load libraries
library(DBI)
library(RSQLite)
# Display sample rows from OLAP fact table
dbGetQuery(olap_conn, "SELECT * FROM fact_rental_revenue LIMIT 10")
# Load libraries
library(DBI)
library(RSQLite)
# Connect to original transactional database
sakila_conn <- dbConnect(SQLite(), "sakila.db")
# Create and connect to new OLAP database
olap_conn <- dbConnect(SQLite(), "SakilaOLAP.db")
print("connection succeeded!")
# Drop table if it exists
dbExecute(olap_conn, "DROP TABLE IF EXISTS fact_rental_revenue")
# Create a new fact table to store aggregated rental revenue information
create_fact_table_sql <- "
CREATE TABLE fact_rental_revenue (
rental_id INTEGER PRIMARY KEY,
date_id TEXT,
customer_id INTEGER,
staff_id INTEGER,
store_id INTEGER,
rental_amount REAL,
late_return_days INTEGER
);
"
dbExecute(olap_conn, create_fact_table_sql)
extract_query <- "
SELECT
r.rental_id,
DATE(r.rental_date) AS date_id,
r.customer_id,
r.staff_id,
i.store_id,
IFNULL(SUM(p.amount), 0) AS rental_amount,
CAST((JULIANDAY(r.return_date) - JULIANDAY(r.rental_date)) AS INTEGER) AS late_return_days
FROM rental r
JOIN inventory i ON r.inventory_id = i.inventory_id
LEFT JOIN payment p ON r.rental_id = p.rental_id
GROUP BY r.rental_id
"
rental_facts <- dbGetQuery(sakila_conn, extract_query)
head(rental_facts)
# Insert extracted data into OLAP database
dbWriteTable(olap_conn, "fact_rental_revenue", rental_facts, append = TRUE, row.names = FALSE)
# Check that data was inserted
dbGetQuery(olap_conn, "SELECT COUNT(*) AS row_count FROM fact_rental_revenue")
# Display sample rows from OLAP fact table
dbGetQuery(olap_conn, "SELECT * FROM fact_rental_revenue LIMIT 10")
query <- "
SELECT
SUBSTR(date_id, 1, 7) AS year_month,
ROUND(AVG(rental_amount), 2) AS avg_rental_amount
FROM fact_rental_revenue
WHERE date_id LIKE '2005-%'
GROUP BY year_month
ORDER BY year_month
"
monthly_avg <- dbGetQuery(olap_conn, query)
print(monthly_avg)
dbDisconnect(sakila_conn)
dbDisconnect(olap_conn)
dbDisconnect(sakila_conn)
dbDisconnect(olap_conn)
# Load libraries
library(DBI)
library(RSQLite)
library(knitr)
# Connect to original transactional database
sakila_conn <- dbConnect(SQLite(), "sakila.db")
# Create and connect to new OLAP database
olap_conn <- dbConnect(SQLite(), "SakilaOLAP.db")
# Drop table if it exists
dbExecute(olap_conn, "DROP TABLE IF EXISTS fact_rental_revenue")
# Create a new fact table to store aggregated rental revenue information
create_fact_table_sql <- "
CREATE TABLE fact_rental_revenue (
rental_id INTEGER PRIMARY KEY,
date_id TEXT,
customer_id INTEGER,
staff_id INTEGER,
store_id INTEGER,
rental_amount REAL,
late_return_days INTEGER
);
"
dbExecute(olap_conn, create_fact_table_sql)
extract_query <- "
SELECT
r.rental_id,
DATE(r.rental_date) AS date_id,
r.customer_id,
r.staff_id,
i.store_id,
IFNULL(SUM(p.amount), 0) AS rental_amount,
CAST((JULIANDAY(r.return_date) - JULIANDAY(r.rental_date)) AS INTEGER) AS late_return_days
FROM rental r
JOIN inventory i ON r.inventory_id = i.inventory_id
LEFT JOIN payment p ON r.rental_id = p.rental_id
GROUP BY r.rental_id
"
rental_facts <- dbGetQuery(sakila_conn, extract_query)
head(rental_facts)
# Insert extracted data into OLAP database
dbWriteTable(olap_conn, "fact_rental_revenue", rental_facts, append = TRUE, row.names = FALSE)
# Check that data was inserted
dbGetQuery(olap_conn, "SELECT COUNT(*) AS row_count FROM fact_rental_revenue")
# Display sample rows from OLAP fact table
dbGetQuery(olap_conn, "SELECT * FROM fact_rental_revenue LIMIT 10")
query <- "
SELECT
SUBSTR(date_id, 1, 7) AS year_month,
ROUND(AVG(rental_amount), 2) AS avg_rental_amount
FROM fact_rental_revenue
WHERE date_id LIKE '2005-%'
GROUP BY year_month
ORDER BY year_month
"
monthly_avg <- dbGetQuery(olap_conn, query)
print(monthly_avg)
kable(monthly_avg, col.names = c("Year-Month", "Average Rental Amount ($)"))
dbDisconnect(sakila_conn)
dbDisconnect(olap_conn)
# Load libraries
library(DBI)
library(RSQLite)
library(knitr)
# Connect to original transactional database
sakila_conn <- dbConnect(SQLite(), "sakila.db")
# Create and connect to new OLAP database
olap_conn <- dbConnect(SQLite(), "SakilaOLAP.db")
print("Database Connected!")
# Drop table if it exists
invisible(dbExecute(olap_conn, "DROP TABLE IF EXISTS fact_rental_revenue"))
# Create a new fact table to store aggregated rental revenue information
create_fact_table_sql <- "
CREATE TABLE fact_rental_revenue (
rental_id INTEGER PRIMARY KEY,
date_id TEXT,
customer_id INTEGER,
staff_id INTEGER,
store_id INTEGER,
rental_amount REAL,
late_return_days INTEGER
);
"
invisible(dbExecute(olap_conn, create_fact_table_sql))
print("Fact table is created!")
extract_query <- "
SELECT
r.rental_id,
DATE(r.rental_date) AS date_id,
r.customer_id,
r.staff_id,
i.store_id,
IFNULL(SUM(p.amount), 0) AS rental_amount,
CAST((JULIANDAY(r.return_date) - JULIANDAY(r.rental_date)) AS INTEGER) AS late_return_days
FROM rental r
JOIN inventory i ON r.inventory_id = i.inventory_id
LEFT JOIN payment p ON r.rental_id = p.rental_id
GROUP BY r.rental_id
"
rental_facts <- dbGetQuery(sakila_conn, extract_query)
head(rental_facts)
# Insert extracted data into OLAP database
dbWriteTable(olap_conn, "fact_rental_revenue", rental_facts, append = TRUE, row.names = FALSE)
# Check that data was inserted
dbGetQuery(olap_conn, "SELECT COUNT(*) AS row_count FROM fact_rental_revenue")
# Display sample rows from OLAP fact table
dbGetQuery(olap_conn, "SELECT * FROM fact_rental_revenue LIMIT 10")
query <- "
SELECT
SUBSTR(date_id, 1, 7) AS year_month,
ROUND(AVG(rental_amount), 2) AS avg_rental_amount
FROM fact_rental_revenue
WHERE date_id LIKE '2005-%'
GROUP BY year_month
ORDER BY year_month
"
monthly_avg <- dbGetQuery(olap_conn, query)
print(monthly_avg)
kable(monthly_avg, col.names = c("Year-Month", "Average Rental Amount ($)"))
dbDisconnect(sakila_conn)
dbDisconnect(olap_conn)
print("Database is disconnected!")
